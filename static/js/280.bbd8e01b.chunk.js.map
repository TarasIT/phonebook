{"version":3,"file":"static/js/280.bbd8e01b.chunk.js","mappings":"0TASaA,EAAWC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yDAKrBC,GAAYJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAiBM,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,0CACjC,SAAAI,GAAqB,OAAAA,EAAlBC,mBAA+C,QAAU,KAAK,IAC3D,SAAAC,GAAqB,OAAAA,EAAlBD,mBACO,OAAS,MAAM,IAG3BE,GAAaV,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAiBW,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,0CAClC,SAAAS,GAAsB,OAAAA,EAAnBC,oBAAiD,QAAU,KAAK,IAC7D,SAAAC,GAAsB,OAAAA,EAAnBD,oBACQ,OAAS,MAAM,IAG5BE,GAAgBf,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAiBgB,IAAAA,GAAAb,EAAAA,EAAAA,GAAA,0CACrC,SAAAc,GAAyB,OAAAA,EAAtBC,uBACiB,QAAU,KAAK,IAC7B,SAAAC,GAAyB,OAAAA,EAAtBD,uBACW,OAAS,MAAM,I,UCV/BE,EAAuB,WAClC,IAAAC,GAAwBC,EAAAA,EAAAA,UAAiB,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA0BL,EAAAA,EAAAA,UAAiB,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAvCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAAgCT,EAAAA,EAAAA,UAAiB,IAAGU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA7CE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,GAAoDb,EAAAA,EAAAA,WAAkB,GAAMc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAArE3B,EAAkB4B,EAAA,GAAEC,EAAqBD,EAAA,GAChDE,GACEhB,EAAAA,EAAAA,WAAkB,GAAMiB,GAAAf,EAAAA,EAAAA,GAAAc,EAAA,GADnBzB,EAAmB0B,EAAA,GAAEC,EAAsBD,EAAA,GAElDE,GACEnB,EAAAA,EAAAA,WAAkB,GAAMoB,GAAAlB,EAAAA,EAAAA,GAAAiB,EAAA,GADnBvB,EAAsBwB,EAAA,GAAEC,EAAyBD,EAAA,GAExDE,GAA8CtB,EAAAA,EAAAA,WAAkB,GAAMuB,GAAArB,EAAAA,EAAAA,GAAAoB,EAAA,GAA/DE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAC1CG,GAAwC1B,EAAAA,EAAAA,WAAkB,GAAM2B,GAAAzB,EAAAA,EAAAA,GAAAwB,EAAA,GAAzDE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAC9BG,GAAWC,EAAAA,EAAAA,KACXC,GAAYC,EAAAA,EAAAA,GAAeC,EAAAA,IAC3BC,GAAQF,EAAAA,EAAAA,GAAeG,EAAAA,IAEvBC,EAAkBC,EAAQ,MAC1BC,EAAkBD,EAAQ,OAEhCE,EAAAA,EAAAA,YAAU,WACM,OAAVL,IACFM,IAAAA,OAAgBC,KACd,oEACA,CACEC,MAAO,QACPC,SAAU,SAGdd,GAASe,EAAAA,EAAAA,GAAW,QAEf9B,IAAPZ,GACQe,IAARX,GAEIc,IADJV,EAGF,GAAG,CACDwB,EACAU,EAAAA,EACAf,EACA3B,EACAI,EACAI,EACAI,EACAG,EACAG,IAGF,IAAMyB,GAAY,eAAA7D,GAAA8D,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,GAA6B,IAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAIhC,OAHvBL,EAAEM,iBACIL,EAAOD,EAAEO,cAEf7B,GAAgB,GAAOyB,EAAAE,KAAA,EACjB1B,GACJ6B,EAAAA,EAAAA,IAAO,CACLxD,KAAAA,EACAI,MAAAA,EACAI,SAAAA,KAEF,KAAD,EACDkB,GAAgB,GAChBzB,EAAQ,IACRI,EAAS,IACTI,EAAY,IACZwC,EAAKQ,QAAQ,yBAAAN,EAAAO,OAAA,GAAAX,EAAA,KACd,gBAjBiBY,GAAA,OAAA7E,EAAA8E,MAAA,KAAAC,UAAA,KAmBlB,OACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,SAAUrB,GAAasB,SAAA,EAC3BH,EAAAA,EAAAA,MAACxF,EAAQ,CAAA2F,SAAA,EACPC,EAAAA,EAAAA,KAACvF,EAAS,CAACI,mBAAoBA,EAAmBkF,SAAC,UACnDC,EAAAA,EAAAA,KAACC,EAAAA,GAAS,CACRC,KAAK,OACLpE,KAAK,OACLqE,SAAU,SAACrB,GACT/C,EAAQ+C,EAAEsB,OAAOC,MACnB,EACAC,QAAS,kBAAM5D,GAAsB,EAAK,EAC1C6D,OAAQ,WACC7D,IAAPZ,EACF,EACA0E,aAAa,KACbC,UAAQ,QAGZb,EAAAA,EAAAA,MAACxF,EAAQ,CAAA2F,SAAA,EACPC,EAAAA,EAAAA,KAACjF,EAAU,CAACG,oBAAqBA,EAAoB6E,SAAC,WACtDC,EAAAA,EAAAA,KAACC,EAAAA,GAAS,CACRC,KAAK,QACLpE,KAAK,QACLqE,SAAU,SAACrB,GACT3C,EAAS2C,EAAEsB,OAAOC,MACpB,EACAC,QAAS,kBAAMzD,GAAuB,EAAK,EAC3C0D,OAAQ,WAEF1D,IADJX,EAGF,EACAsE,aAAa,KACbC,UAAQ,QAGZb,EAAAA,EAAAA,MAACxF,EAAQ,CAAA2F,SAAA,EACPC,EAAAA,EAAAA,KAAC5E,EAAa,CAACG,uBAAwBA,EAAuBwE,SAAC,cAG/DC,EAAAA,EAAAA,KAACC,EAAAA,GAAS,CACRC,KAAM/C,EAAkB,OAAS,WACjCrB,KAAK,WACLqE,SAAU,SAACrB,GACTvC,EAAYuC,EAAEsB,OAAOC,MACvB,EACAC,QAAS,kBAAMtD,GAA0B,EAAK,EAC9CuD,OAAQ,WAEFvD,IADJV,EAGF,EACAkE,aAAa,KACbC,UAAQ,KAEVT,EAAAA,EAAAA,KAACU,EAAAA,GAAe,CACdR,KAAK,SACLI,QAAS,kBAAMtD,GAA0B,EAAK,EAC9CuD,OAAQ,WAEFvD,IADJV,EAGF,EACAqE,QAAS,kBAAMvD,GAAoBD,EAAgB,EAAC4C,UAEpDC,EAAAA,EAAAA,KAAA,OACEY,IAAKzD,EAAkBa,EAAkBE,EACzC2C,IAAK1D,EAAkB,aAAe,aACtCmB,MAAM,KACNwC,OAAO,aAIbd,EAAAA,EAAAA,KAACe,EAAAA,GAAM,CAACb,KAAK,SAAQH,SAClBpC,IAAcJ,GAAeyC,EAAAA,EAAAA,KAACgB,EAAAA,EAAM,IAAM,aAInD,ECjKaC,EAAmB5G,EAAAA,GAAO6G,QAAO3G,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,sGCc9C,EAXmB,WACjB,OACEoF,EAAAA,EAAAA,MAACqB,EAAgB,CAAAlB,SAAA,EACfC,EAAAA,EAAAA,KAACmB,EAAAA,EAAM,CAAApB,UACLC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,oBAETC,EAAAA,EAAAA,KAACvE,EAAgB,MAGvB,C","sources":["components/RegistrationForm/RegistrationForm.styled.tsx","components/RegistrationForm/RegistrationForm.tsx","pages/Registration/Registartion.styled.tsx","pages/Registration/Registration.tsx"],"sourcesContent":["import styled from \"styled-components\";\nimport { FormLabel } from \"../../styles/styled-components/Common.styled\";\n\ninterface FormLabelProps {\n  isNameInputFocused?: boolean;\n  isEmailInputFocused?: boolean;\n  isPasswordInputFocused?: boolean;\n}\n\nexport const InputBox = styled.div`\n  position: relative;\n  margin-bottom: 40px;\n`;\n\nexport const NameLabel = styled(FormLabel)<FormLabelProps>`\n  top: ${({ isNameInputFocused }) => (isNameInputFocused ? \"-15px\" : \"5px\")};\n  font-size: ${({ isNameInputFocused }) =>\n    isNameInputFocused ? \"14px\" : \"18px\"};\n`;\n\nexport const EmailLabel = styled(FormLabel)<FormLabelProps>`\n  top: ${({ isEmailInputFocused }) => (isEmailInputFocused ? \"-15px\" : \"5px\")};\n  font-size: ${({ isEmailInputFocused }) =>\n    isEmailInputFocused ? \"14px\" : \"18px\"};\n`;\n\nexport const PasswordLabel = styled(FormLabel)<FormLabelProps>`\n  top: ${({ isPasswordInputFocused }) =>\n    isPasswordInputFocused ? \"-15px\" : \"5px\"};\n  font-size: ${({ isPasswordInputFocused }) =>\n    isPasswordInputFocused ? \"14px\" : \"18px\"};\n`;\n","import React, { ChangeEvent, FC, FormEvent, useEffect, useState } from \"react\";\nimport { useAppSelector, useAppDispatch } from \"../../hooks/hook\";\nimport Notiflix from \"notiflix\";\nimport { Loader } from \"../Loader/Loader\";\nimport { errorReset } from \"../../redux/auth/authSlice\";\nimport { regist } from \"../../redux/auth/operations\";\nimport { selectError, selectIsLoading } from \"../../redux/auth/selectors\";\nimport {\n  InputBox,\n  NameLabel,\n  EmailLabel,\n  PasswordLabel,\n} from \"./RegistrationForm.styled\";\nimport {\n  Button,\n  FormInput,\n  Form,\n  ShowPasswordBtn,\n} from \"../../styles/styled-components/Common.styled\";\n\nexport const RegistrationForm: FC = (): JSX.Element => {\n  const [name, setName] = useState<string>(\"\");\n  const [email, setEmail] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n  const [isNameInputFocused, setIsNameInputFocused] = useState<boolean>(false);\n  const [isEmailInputFocused, setIsEmailInputFocused] =\n    useState<boolean>(false);\n  const [isPasswordInputFocused, setIsPasswordInputFocused] =\n    useState<boolean>(false);\n  const [isPasswordShown, setIsPasswordShown] = useState<boolean>(false);\n  const [isUserRegist, setIsUserRegist] = useState<boolean>(false);\n  const dispatch = useAppDispatch();\n  const isLoading = useAppSelector(selectIsLoading);\n  const error = useAppSelector(selectError);\n\n  const showPasswordImg = require(\"../../assets/images/opened-eye.png\");\n  const hidePasswordImg = require(\"../../assets/images/closed-eye.png\");\n\n  useEffect(() => {\n    if (error !== null) {\n      Notiflix.Notify.info(\n        \"Invalid data input. Please, check your email and password length!\",\n        {\n          width: \"250px\",\n          fontSize: \"20px\",\n        }\n      );\n      dispatch(errorReset(null));\n    }\n    name ? setIsNameInputFocused(true) : setIsNameInputFocused(false);\n    email ? setIsEmailInputFocused(true) : setIsEmailInputFocused(false);\n    password\n      ? setIsPasswordInputFocused(true)\n      : setIsPasswordInputFocused(false);\n  }, [\n    error,\n    errorReset,\n    dispatch,\n    name,\n    email,\n    password,\n    setIsNameInputFocused,\n    setIsEmailInputFocused,\n    setIsPasswordInputFocused,\n  ]);\n\n  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const form = e.currentTarget;\n\n    setIsUserRegist(false);\n    await dispatch(\n      regist({\n        name,\n        email,\n        password,\n      })\n    );\n    setIsUserRegist(true);\n    setName(\"\");\n    setEmail(\"\");\n    setPassword(\"\");\n    form.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <InputBox>\n        <NameLabel isNameInputFocused={isNameInputFocused}>Name</NameLabel>\n        <FormInput\n          type=\"text\"\n          name=\"name\"\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            setName(e.target.value);\n          }}\n          onFocus={() => setIsNameInputFocused(true)}\n          onBlur={() => {\n            name ? setIsNameInputFocused(true) : setIsNameInputFocused(false);\n          }}\n          autoComplete=\"on\"\n          required\n        />\n      </InputBox>\n      <InputBox>\n        <EmailLabel isEmailInputFocused={isEmailInputFocused}>Email</EmailLabel>\n        <FormInput\n          type=\"email\"\n          name=\"email\"\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            setEmail(e.target.value);\n          }}\n          onFocus={() => setIsEmailInputFocused(true)}\n          onBlur={() => {\n            email\n              ? setIsEmailInputFocused(true)\n              : setIsEmailInputFocused(false);\n          }}\n          autoComplete=\"on\"\n          required\n        />\n      </InputBox>\n      <InputBox>\n        <PasswordLabel isPasswordInputFocused={isPasswordInputFocused}>\n          Password\n        </PasswordLabel>\n        <FormInput\n          type={isPasswordShown ? \"text\" : \"password\"}\n          name=\"password\"\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            setPassword(e.target.value);\n          }}\n          onFocus={() => setIsPasswordInputFocused(true)}\n          onBlur={() => {\n            password\n              ? setIsPasswordInputFocused(true)\n              : setIsPasswordInputFocused(false);\n          }}\n          autoComplete=\"on\"\n          required\n        />\n        <ShowPasswordBtn\n          type=\"button\"\n          onFocus={() => setIsPasswordInputFocused(true)}\n          onBlur={() => {\n            password\n              ? setIsPasswordInputFocused(true)\n              : setIsPasswordInputFocused(false);\n          }}\n          onClick={() => setIsPasswordShown(!isPasswordShown)}\n        >\n          <img\n            src={isPasswordShown ? showPasswordImg : hidePasswordImg}\n            alt={isPasswordShown ? \"opened eye\" : \"closed eye\"}\n            width=\"25\"\n            height=\"25\"\n          />\n        </ShowPasswordBtn>\n      </InputBox>\n      <Button type=\"submit\">\n        {isLoading && !isUserRegist ? <Loader /> : \"Regist\"}\n      </Button>\n    </Form>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const RegistrationPage = styled.section`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding-top: 50px;\n`;\n","import React, { FC } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { RegistrationForm } from \"../../components/RegistrationForm/RegistrationForm\";\nimport { RegistrationPage } from \"./Registartion.styled\";\n\nconst Regist: FC = (): JSX.Element => {\n  return (\n    <RegistrationPage>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegistrationForm />\n    </RegistrationPage>\n  );\n};\n\nexport default Regist;\n"],"names":["InputBox","styled","div","_templateObject","_taggedTemplateLiteral","NameLabel","FormLabel","_templateObject2","_ref","isNameInputFocused","_ref2","EmailLabel","_templateObject3","_ref3","isEmailInputFocused","_ref4","PasswordLabel","_templateObject4","_ref5","isPasswordInputFocused","_ref6","RegistrationForm","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","email","setEmail","_useState5","_useState6","password","setPassword","_useState7","_useState8","setIsNameInputFocused","_useState9","_useState10","setIsEmailInputFocused","_useState11","_useState12","setIsPasswordInputFocused","_useState13","_useState14","isPasswordShown","setIsPasswordShown","_useState15","_useState16","isUserRegist","setIsUserRegist","dispatch","useAppDispatch","isLoading","useAppSelector","selectIsLoading","error","selectError","showPasswordImg","require","hidePasswordImg","useEffect","Notiflix","info","width","fontSize","errorReset","handleSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","form","wrap","_context","prev","next","preventDefault","currentTarget","regist","reset","stop","_x","apply","arguments","_jsxs","Form","onSubmit","children","_jsx","FormInput","type","onChange","target","value","onFocus","onBlur","autoComplete","required","ShowPasswordBtn","onClick","src","alt","height","Button","Loader","RegistrationPage","section","Helmet"],"sourceRoot":""}