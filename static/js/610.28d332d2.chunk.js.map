{"version":3,"file":"static/js/610.28d332d2.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.styled.tsx","components/LoginForm/LoginForm.tsx","pages/Login/Login.styled.tsx","pages/Login/Login.tsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const InputBox = styled.div`\n  position: relative;\n  margin-bottom: 40px;\n`;\n","import React, { ChangeEvent, FC, FormEvent, useEffect, useState } from \"react\";\nimport Notiflix from \"notiflix\";\nimport { useAppSelector, useAppDispatch } from \"../../hooks/hook\";\nimport { Loader } from \"../Loader/Loader\";\nimport { logIn } from \"../../redux/auth/operations\";\nimport { errorReset } from \"../../redux/auth/authSlice\";\nimport { selectError, selectIsLoading } from \"../../redux/auth/selectors\";\nimport { InputBox } from \"./LoginForm.styled\";\nimport {\n  Button,\n  FormInput,\n  Form,\n  ShowPasswordBtn,\n  ShowPasswordIcon,\n  HidePasswordIcon,\n  FormLabel,\n} from \"../../styles/styled-components/Common.styled\";\n\nexport const LoginForm: FC = (): JSX.Element => {\n  const [email, setEmail] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n  const [isEmailInputFocused, setIsEmailInputFocused] =\n    useState<boolean>(false);\n  const [isPasswordInputFocused, setIsPasswordInputFocused] =\n    useState<boolean>(false);\n  const [isPasswordShown, setIsPasswordShown] = useState<boolean>(false);\n  const [isUserLogIn, setIsUserLogIn] = useState<boolean>(false);\n  const dispatch = useAppDispatch();\n  const isLoading = useAppSelector(selectIsLoading);\n  const error = useAppSelector(selectError);\n\n  useEffect(() => {\n    if (error) {\n      Notiflix.Notify.info(\n        \"User validation failed. Please, check your email or password!\",\n        {\n          width: \"500px\",\n          fontSize: \"20px\",\n        }\n      );\n      dispatch(errorReset(null));\n    }\n    email ? setIsEmailInputFocused(true) : setIsEmailInputFocused(false);\n    password\n      ? setIsPasswordInputFocused(true)\n      : setIsPasswordInputFocused(false);\n  }, [\n    error,\n    errorReset,\n    dispatch,\n    email,\n    password,\n    setIsEmailInputFocused,\n    setIsPasswordInputFocused,\n  ]);\n\n  const handleSubmit = async (e: FormEvent<HTMLFormElement>): Promise<void> => {\n    e.preventDefault();\n    const form = e.currentTarget;\n\n    setIsUserLogIn(false);\n    await dispatch(\n      logIn({\n        email,\n        password,\n      })\n    );\n    setIsUserLogIn(true);\n    setEmail(\"\");\n    setPassword(\"\");\n    form.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <InputBox>\n        <FormLabel isEmailInputFocused={isEmailInputFocused}>Email</FormLabel>\n        <FormInput\n          type=\"email\"\n          name=\"email\"\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            setEmail(e.target.value.trim());\n          }}\n          onFocus={() => setIsEmailInputFocused(true)}\n          onBlur={() => {\n            email\n              ? setIsEmailInputFocused(true)\n              : setIsEmailInputFocused(false);\n          }}\n          autoComplete=\"on\"\n          required\n        />\n      </InputBox>\n      <InputBox>\n        <FormLabel isPasswordInputFocused={isPasswordInputFocused}>\n          Password\n        </FormLabel>\n        <FormInput\n          type={isPasswordShown ? \"text\" : \"password\"}\n          name=\"password\"\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            setPassword(e.target.value.trim());\n          }}\n          onFocus={() => setIsPasswordInputFocused(true)}\n          onBlur={() => {\n            password\n              ? setIsPasswordInputFocused(true)\n              : setIsPasswordInputFocused(false);\n          }}\n          autoComplete=\"on\"\n          required\n        />\n        <ShowPasswordBtn\n          type=\"button\"\n          onFocus={() => setIsPasswordInputFocused(true)}\n          onBlur={() => {\n            password\n              ? setIsPasswordInputFocused(true)\n              : setIsPasswordInputFocused(false);\n          }}\n          onClick={() => setIsPasswordShown(!isPasswordShown)}\n        >\n          {isPasswordShown ? <HidePasswordIcon /> : <ShowPasswordIcon />}\n        </ShowPasswordBtn>\n      </InputBox>\n      <Button type=\"submit\">\n        {isLoading && !isUserLogIn ? <Loader /> : \"Log In\"}\n      </Button>\n    </Form>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const LoginPage = styled.section`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding-top: 50px;\n`;\n","import React, { FC } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { LoginForm } from \"../../components/LoginForm/LoginForm\";\nimport { LoginPage } from \"./Login.styled\";\n\nconst Login: FC = (): JSX.Element => {\n  return (\n    <LoginPage>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n    </LoginPage>\n  );\n};\n\nexport default Login;\n"],"names":["InputBox","styled","div","_templateObject","_taggedTemplateLiteral","LoginForm","_useState","useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","_useState5","_useState6","isEmailInputFocused","setIsEmailInputFocused","_useState7","_useState8","isPasswordInputFocused","setIsPasswordInputFocused","_useState9","_useState10","isPasswordShown","setIsPasswordShown","_useState11","_useState12","isUserLogIn","setIsUserLogIn","dispatch","useAppDispatch","isLoading","useAppSelector","selectIsLoading","error","selectError","useEffect","Notiflix","info","width","fontSize","errorReset","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","form","wrap","_context","prev","next","preventDefault","currentTarget","logIn","reset","stop","_x","apply","arguments","_jsxs","Form","onSubmit","children","_jsx","FormLabel","FormInput","type","name","onChange","target","value","trim","onFocus","onBlur","autoComplete","required","ShowPasswordBtn","onClick","HidePasswordIcon","ShowPasswordIcon","Button","Loader","LoginPage","section","Helmet"],"sourceRoot":""}