{"version":3,"file":"static/js/280.ca8157c6.chunk.js","mappings":"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","sources":["components/RegistrationForm/RegistrationForm.styled.tsx","components/RegistrationForm/RegistrationForm.tsx","pages/Registration/Registartion.styled.tsx","pages/Registration/Registration.tsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const InputBox = styled.div`\n  position: relative;\n  margin-bottom: 40px;\n`;\n","import React, { ChangeEvent, FC, FormEvent, useEffect, useState } from \"react\";\nimport Notiflix from \"notiflix\";\nimport { StyleSheetManager } from \"styled-components\";\nimport { useAppSelector, useAppDispatch } from \"../../hooks/hook\";\nimport { Loader } from \"../Loader/Loader\";\nimport { errorReset } from \"../../redux/auth/authSlice\";\nimport { regist } from \"../../redux/auth/operations\";\nimport { selectError, selectIsLoading } from \"../../redux/auth/selectors\";\nimport { InputBox } from \"./RegistrationForm.styled\";\nimport {\n  Button,\n  FormInput,\n  Form,\n  ShowPasswordBtn,\n  ShowPasswordIcon,\n  HidePasswordIcon,\n  FormLabel,\n} from \"../../styles/styled-components/Common.styled\";\n\nconst shouldForwardProp = (prop: string) => {\n  return (\n    prop !== \"isNameInputFocused\" &&\n    prop !== \"isEmailInputFocused\" &&\n    prop !== \"isPasswordInputFocused\"\n  );\n};\n\nexport const RegistrationForm: FC = (): JSX.Element => {\n  const [name, setName] = useState<string>(\"\");\n  const [email, setEmail] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n  const [isNameInputFocused, setIsNameInputFocused] = useState<boolean>(false);\n  const [isEmailInputFocused, setIsEmailInputFocused] =\n    useState<boolean>(false);\n  const [isPasswordInputFocused, setIsPasswordInputFocused] =\n    useState<boolean>(false);\n  const [isPasswordShown, setIsPasswordShown] = useState<boolean>(false);\n  const [isUserRegist, setIsUserRegist] = useState<boolean>(false);\n  const dispatch = useAppDispatch();\n  const isLoading = useAppSelector(selectIsLoading);\n  const error = useAppSelector(selectError);\n\n  useEffect(() => {\n    if (error !== null) {\n      Notiflix.Notify.info(\n        \"Invalid data input. Please, check your email and password length!\",\n        {\n          width: \"250px\",\n          fontSize: \"20px\",\n        }\n      );\n      dispatch(errorReset(null));\n    }\n    name ? setIsNameInputFocused(true) : setIsNameInputFocused(false);\n    email ? setIsEmailInputFocused(true) : setIsEmailInputFocused(false);\n    password\n      ? setIsPasswordInputFocused(true)\n      : setIsPasswordInputFocused(false);\n  }, [\n    error,\n    errorReset,\n    dispatch,\n    name,\n    email,\n    password,\n    setIsNameInputFocused,\n    setIsEmailInputFocused,\n    setIsPasswordInputFocused,\n  ]);\n\n  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const form = e.currentTarget;\n\n    setIsUserRegist(false);\n    await dispatch(\n      regist({\n        name,\n        email,\n        password,\n      })\n    );\n    setIsUserRegist(true);\n    setName(\"\");\n    setEmail(\"\");\n    setPassword(\"\");\n    form.reset();\n  };\n\n  return (\n    <StyleSheetManager shouldForwardProp={shouldForwardProp}>\n      <Form onSubmit={handleSubmit}>\n        <InputBox>\n          <FormLabel isNameInputFocused={isNameInputFocused}>Name</FormLabel>\n          <FormInput\n            type=\"text\"\n            name=\"name\"\n            onChange={(e: ChangeEvent<HTMLInputElement>) => {\n              setName(e.target.value);\n            }}\n            onFocus={() => setIsNameInputFocused(true)}\n            onBlur={() => {\n              name ? setIsNameInputFocused(true) : setIsNameInputFocused(false);\n            }}\n            autoComplete=\"on\"\n            required\n          />\n        </InputBox>\n        <InputBox>\n          <FormLabel isEmailInputFocused={isEmailInputFocused}>Email</FormLabel>\n          <FormInput\n            type=\"email\"\n            name=\"email\"\n            onChange={(e: ChangeEvent<HTMLInputElement>) => {\n              setEmail(e.target.value);\n            }}\n            onFocus={() => setIsEmailInputFocused(true)}\n            onBlur={() => {\n              email\n                ? setIsEmailInputFocused(true)\n                : setIsEmailInputFocused(false);\n            }}\n            autoComplete=\"on\"\n            required\n          />\n        </InputBox>\n        <InputBox>\n          <FormLabel isPasswordInputFocused={isPasswordInputFocused}>\n            Password\n          </FormLabel>\n          <FormInput\n            type={isPasswordShown ? \"text\" : \"password\"}\n            name=\"password\"\n            onChange={(e: ChangeEvent<HTMLInputElement>) => {\n              setPassword(e.target.value);\n            }}\n            onFocus={() => setIsPasswordInputFocused(true)}\n            onBlur={() => {\n              password\n                ? setIsPasswordInputFocused(true)\n                : setIsPasswordInputFocused(false);\n            }}\n            autoComplete=\"on\"\n            required\n          />\n          <ShowPasswordBtn\n            type=\"button\"\n            onFocus={() => setIsPasswordInputFocused(true)}\n            onBlur={() => {\n              password\n                ? setIsPasswordInputFocused(true)\n                : setIsPasswordInputFocused(false);\n            }}\n            onClick={() => setIsPasswordShown(!isPasswordShown)}\n          >\n            {isPasswordShown ? <HidePasswordIcon /> : <ShowPasswordIcon />}\n          </ShowPasswordBtn>\n        </InputBox>\n        <Button type=\"submit\">\n          {isLoading && !isUserRegist ? <Loader /> : \"Regist\"}\n        </Button>\n      </Form>\n    </StyleSheetManager>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const RegistrationPage = styled.section`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding-top: 50px;\n`;\n","import React, { FC } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { RegistrationForm } from \"../../components/RegistrationForm/RegistrationForm\";\nimport { RegistrationPage } from \"./Registartion.styled\";\n\nconst Regist: FC = (): JSX.Element => {\n  return (\n    <RegistrationPage>\n      <Helmet>\n        <title>Registration on Phonebook</title>\n      </Helmet>\n      <RegistrationForm />\n    </RegistrationPage>\n  );\n};\n\nexport default Regist;\n"],"names":["InputBox","styled","div","_templateObject","_taggedTemplateLiteral","shouldForwardProp","prop","RegistrationForm","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","email","setEmail","_useState5","_useState6","password","setPassword","_useState7","_useState8","isNameInputFocused","setIsNameInputFocused","_useState9","_useState10","isEmailInputFocused","setIsEmailInputFocused","_useState11","_useState12","isPasswordInputFocused","setIsPasswordInputFocused","_useState13","_useState14","isPasswordShown","setIsPasswordShown","_useState15","_useState16","isUserRegist","setIsUserRegist","dispatch","useAppDispatch","isLoading","useAppSelector","selectIsLoading","error","selectError","useEffect","Notiflix","info","width","fontSize","errorReset","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","form","wrap","_context","prev","next","preventDefault","currentTarget","regist","reset","stop","_x","apply","arguments","_jsx","StyleSheetManager","children","_jsxs","Form","onSubmit","FormLabel","FormInput","type","onChange","target","value","onFocus","onBlur","autoComplete","required","ShowPasswordBtn","onClick","HidePasswordIcon","ShowPasswordIcon","Button","Loader","RegistrationPage","section","Helmet"],"sourceRoot":""}